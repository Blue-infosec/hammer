# -*- python -*-
import os, os.path
Import('env libhammer_shared testruns targets')
# LLVM-related flags
if GetOption("use_llvm"):
    Import('llvm_defines')
    Import('llvm_includes')

pythonenv = env.Clone(IMPLICIT_COMMAND_DEPENDENCIES = 0)

swig = pythonenv.Command("hammer.i", "../swig/hammer.i", Copy("$TARGET", "$SOURCE"))
setup = ['setup.py']
pydir = os.path.join(env['BUILD_BASE'], 'src/bindings/python')
if GetOption("use_llvm"):
    define_list = ','.join(llvm_defines + ['HAMMER_LLVM_BACKEND'])
    inc_list = ' '.join(['-I' + e for e in llvm_includes])
else:
    define_list = None
    inc_list = None

swig_opt_list = '-DHAMMER_INTERNAL__NO_STDARG_H -I../../'
arg_list = 'python ' + os.path.join(pydir, 'setup.py') + ' build_ext --inplace '
if inc_list:
    arg_list = arg_list + inc_list
    swig_opt_list = swig_opt_list + ' ' + inc_list
if define_list:
    arg_list = arg_list + ' --define=\"' + define_list + '\"'
arg_list = arg_list + ' --swig-opts=\"' + swig_opt_list + '\"'

libhammer_python = pythonenv.Command(['hammer.py', 'hammer_wrap.c'], [swig, setup], arg_list)

Default(libhammer_python)

pytestenv = pythonenv.Clone()
pytestenv['ENV']['LD_LIBRARY_PATH'] = os.path.dirname(str(libhammer_shared[0]))
pytests = ['hammer_tests.py']
pytestexec = pytestenv.Command(['hammer.pyc', 'hammer_tests.pyc'], pytests + libhammer_python, "LD_LIBRARY_PATH=" + os.path.dirname(str(libhammer_shared[0])) + " nosetests -vv $SOURCE")
pytest = Alias("testpython", [pytestexec], pytestexec)
AlwaysBuild(pytestexec)
testruns.append(pytest)

pyinstallexec = pythonenv.Command(None, libhammer_python, 'python ' + os.path.join(pydir, 'setup.py ') + ' install')
pyinstall = Alias("installpython", [pyinstallexec], pyinstallexec)
targets.append(pyinstall)
